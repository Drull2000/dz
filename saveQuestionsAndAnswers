#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <random>

using namespace std;

void saveQuestionsAndAnswers(const vector<string>& questions, const vector<string>& answers) {
    ofstream file("questions.txt");
    if (!file.is_open()) {
        cerr << "Не вдалося відкрити файл для запису!" << endl;
        return;
    }

    for (size_t i = 0; i < questions.size(); ++i) {
        file << "Питання " << i + 1 << ": " << questions[i] << "\n";
        file << "Відповідь: " << answers[i] << "\n\n";
    }

    file.close();
    cout << "Файл 'questions.txt' успішно створено!" << endl;
}

int main() {
    vector<string> allQuestions = {
        "Поясніть причини виникнення об'єктно-орієнтованого програмування.",
        "Які переваги та недоліки має об'єктно-орієнтований підхід?",
        "Що таке інкапсуляція?",
        "Що таке абстракція?",
        "Що таке поліморфізм?",
        "Що таке успадкування?",
        "Що таке клас і об'єкт?",
        "Що таке специфікатор доступу?",
        "Що таке конструктор?",
        "Що таке деструктор?",
        "Що таке статична змінна-член класу?",
        "Що таке this?",
        "Що таке конструктор копіювання?",
        "Що таке перевантаження операторів?",
        "Що таке дружня функція?",
        "Що таке статичний поліморфізм?",
        "Що таке шаблонний клас?",
        "Що таке дерево?",
        "Що таке розумний покажчик?",
        "Що таке STL?"
    };

    random_device rd;
    mt19937 g(rd());
    shuffle(allQuestions.begin(), allQuestions.end(), g);

    vector<string> selectedQuestions(allQuestions.begin(), allQuestions.begin() + 20);

    vector<string> answers = {
        "ООП з’явилось для спрощення створення великих програм — щоб код був більш зрозумілий і керований.",
        "Переваги: модульність, повторне використання, наочність. Недоліки: складніший початок, іноді повільніше виконання.",
        "Інкапсуляція — приховування внутрішніх даних об’єкта. Користувач бачить лише інтерфейс (приклад: телевізор).",
        "Абстракція — виділення головного, відкидання несуттєвого (приклад: автомобіль — не важливо, як працює двигун).",
        "Поліморфізм — здатність об’єктів діяти по-різному при однакових викликах (приклад: кнопка — викликає різні дії).",
        "Успадкування — створення нового класу на основі існуючого (приклад: кішка — нащадок тварини).",
        "Клас — шаблон, об’єкт — конкретний екземпляр цього шаблону.",
        "Специфікатор доступу визначає, які частини коду можуть використовувати члени класу (public, private, protected).",
        "Конструктор — спеціальна функція, яка ініціалізує об’єкт.",
        "Деструктор — викликається при знищенні об’єкта, звільняє ресурси.",
        "Статична змінна класу спільна для всіх об’єктів цього класу.",
        "this — покажчик на поточний об’єкт, що виконує метод.",
        "Конструктор копіювання створює новий об’єкт як копію іншого.",
        "Перевантаження операторів — можливість змінити поведінку стандартних операторів для своїх класів.",
        "Дружня функція має доступ до приватних членів класу, але не є його методом.",
        "Статичний поліморфізм — визначається на етапі компіляції (приклад: перевантаження функцій).",
        "Шаблонний клас — клас, який працює з будь-якими типами даних.",
        "Дерево — структура даних з вузлом і гілками (приклад: сімейне дерево).",
        "Розумний покажчик — автоматично керує пам’яттю, не дає витоків.",
        "STL — стандартна бібліотека шаблонів, яка містить контейнери, ітератори й алгоритми."
    };

    saveQuestionsAndAnswers(selectedQuestions, answers);

    return 0;
}
