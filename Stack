#include <iostream>
using namespace std;

class Stack {
private:
    struct Node {
        int value;
        Node* next;
        Node(int v) : value(v), next(nullptr) {}
    };

    Node* topNode;
    int count;

public:
    Stack() : topNode(nullptr), count(0) {}

    void push(int value) {
        Node* node = new Node(value);
        node->next = topNode;
        topNode = node;
        count++;
    }

    void pop() {
        if (!topNode) return;
        Node* temp = topNode;
        topNode = topNode->next;
        delete temp;
        count--;
    }

    int top() const {
        if (!topNode) throw runtime_error("Stack is empty");
        return topNode->value;
    }

    bool empty() const {
        return topNode == nullptr;
    }

    int size() const {
        return count;
    }

    void clear() {
        while (!empty()) pop();
    }

    ~Stack() {
        clear();
    }
};

int main() {
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);
    cout << "Top: " << s.top() << endl;
    s.pop();
    cout << "Top after pop: " << s.top() << endl;
    cout << "Size: " << s.size() << endl;
    return 0;
}
